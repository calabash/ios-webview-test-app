variables:
  # When Agent.JobName matches this value (and the git ref is a tag), then
  # built artifacts will be published to Azure Blob Storage.
  - name: "AzurePublishWhen"
    value: "Monterey-Xcode-13.3.1"
  - name: "RunTestCloudTestsWhen"
    value: "Monterey-Xcode-13.3.1"
  - group: "XamarinUITestCI"

trigger:
  tags:
    include:
    - '*'
  branches:
    include:
    - master
pr:
  branches:
    include:
    - master

schedules:
- cron: "0 8 * * Mon-Fri"
  displayName: Nightly build
  branches:
    include:
    - master
  always: true

jobs:
  - job:
    strategy:
      matrix:
        BigSur-Xcode-13.2:
          IMAGE_POOL: 'macOS-11'
          XCODE_VERSION: '13.2'
        Monterey-Xcode-13.3.1:
          IMAGE_POOL: 'macOS-12'
          XCODE_VERSION: '13.3.1'
    timeoutInMinutes: 240
    pool:
      vmImage: $(IMAGE_POOL)
    variables:
    - group: XTCRunTimeArtifactsCI

    steps:

    - script: |
        set -e
        sudo xcode-select --switch "/Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer"
        echo "Xcode version: $(xcrun xcodebuild -version)"
        echo "Xcode path: $(xcrun -f xcodebuild)"
        echo "Xcode select path: $(xcode-select --print-path)"
      displayName: "Select Xcode $(XCODE_VERSION)"

    - script: git submodule update --init --recursive
      displayName: "Update submodules"

    - script: gem update --system
      displayName: "Update rubygems version"

    - script: |
        set -e
        ruby -v
        bundler -v
      displayName: "Ruby info"

    - script: |
        set -e
        echo -e "install: --no-document --env-shebang\nupdate:  --no-document --env-shebang" > ~/.gemrc
        bundle install
      displayName: "Prepare Ruby Environment"

    - script: |
        set -e
        git clone https://$(CalabashKeychainGitHubAccessToken)@github.com/xamarinhq/calabash-codesign.git
        calabash-codesign/apple/create-keychain.sh
      displayName: "Download and install keychain"

    - script: bundle install
      workingDirectory: 'CalWebViewApp'
      displayName: "CalWebViewApp bundle install"

    - script: make app-cal
      workingDirectory: 'CalWebViewApp'
      displayName: "Make app-cal"

    - script: make ipa-cal
      workingDirectory: 'CalWebViewApp'
      displayName: "Make ipa-cal"      

    - script: bundle exec bin/ci/cucumber.rb
      displayName: "Cucumber"
      
    - script: SKIP_IPA_BUILD=1 bin/appcenter.sh App-Center-Test-Cloud/Calabash.iOS.CI
      env:
        APPCENTER_ACCESS_TOKEN: $(AppCenterAPITokenProd)

      workingDirectory: 'CalWebViewApp'
      displayName: "App Center Test"
      condition: eq(variables['Agent.JobName'], variables['RunTestCloudTestsWhen'])

    - task: Bash@3
      inputs:
        targetType: filePath
        filePath: "./bin/ci/az-publish.sh"
      env:
        AZURE_STORAGE_ACCOUNT: $(AzureStorageAccount)
        AZURE_STORAGE_KEY: $(AzureStorageKey)
        AZURE_STORAGE_CONNECTION_STRING: $(AzureStorageConnectionString)
        SOURCE_BRANCH: $(Build.SourceBranch)
      displayName: "Publish to Azure Blob Storage"
      condition: and(succeeded(), eq(variables['Agent.JobName'], variables['AzurePublishWhen']), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'IndividualCI'))

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFiles: 'CalWebViewApp/reports/**/*.xml'
        failTaskOnFailedTests: true
      condition: always()
